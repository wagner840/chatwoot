version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    restart: always
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      # POSTGRES_PASSWORD será pego do .env
    healthcheck: # Adicionado healthcheck para postgres
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck: # Adicionado healthcheck para redis
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço base para web e worker
  app-base: &app-base # Âncora sem o depends_on aqui
    build:
      context: .
      dockerfile: Dockerfile
    image: chatwoot/app-fork-custom
    env_file:
      - .env
    volumes:
      - storage_data:/app/storage

  web:
    <<: *app-base # Herda de app-base
    depends_on: # depends_on definido diretamente no serviço web
      postgres:
        condition: service_healthy # Espera o Postgres estar saudável
      redis:
        condition: service_healthy # Espera o Redis estar saudável
    ports:
      - "127.0.0.1:3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/v1/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: always

  worker:
    <<: *app-base # Herda de app-base
    depends_on: # depends_on definido diretamente no serviço worker
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Sem porta exposta para o worker
    healthcheck:
      # O teste para sidekiqmon pode precisar do REDIS_URL completo.
      # Se REDIS_URL no .env for redis://redis:6379, certifique-se que `redis` é o nome do serviço.
      # Ajuste se o REDIS_URL no .env for diferente (ex: com senha)
      # Se o REDIS_URL for redis://:${REDIS_PASSWORD}@redis:6379
      test: ["CMD-SHELL", "bundle exec sidekiqmon status -r ${REDIS_URL} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local
